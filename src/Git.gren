module Git exposing
    ( Error(..)
    , errorToString
    , clonePackage
    , fetchLatestVersion
    , fetchVersions
    , hasLocalTag
    , hasNoLocalChangesSinceTag
    )


import Bytes
import ChildProcess
import FileSystem.Path as Path exposing (Path)
import Compiler.PackageName as PackageName exposing (PackageName)
import SemanticVersion exposing (SemanticVersion)
import Task exposing (Task)

type Error
    = MissingGit
    | NoVersions
    | NoSuchRepo
    | NoSuchRepoOrVersion
    | FailedCommand


-- TODO
errorToString : Error -> String
errorToString err =
    ""
        -- Git.MissingGit ->
        --   toGitReport
        --     (context ++ ", but I couldn't find a git binary.")
        --     [ D.reflow
        --         "I use git to clone dependencies from github.\
        --         \ Make sure that git is installed and present in your PATH."
        --     ]
        -- Git.NoVersions ->
        --   toGitReport
        --     (context ++ ", but I couldn't find any semver compatible tags in this repo.")
        --     [ D.reflow
        --         "Gren packages are just git repositories with tags following the \
        --         \ semantic versioning scheme. However, it seems that this particular repo \
        --         \ doesn't have _any_ semantic version tags!"
        --     ]
        -- Git.NoSuchRepo ->
        --   toGitReport
        --     (context ++ ", but I couldn't find the repo on github.")
        --     [ D.reflow
        --         "Gren packages are just git repositories hosted on github, however \
        --         \ it seems like this repo doesn't exist."
        --     ]
        -- Git.NoSuchRepoOrVersion vsn ->
        --   toGitReport
        --     (context ++ ", but I couldn't find the correct version of this package on github.")
        --     [ D.reflow $
        --         "Gren packages are just git repositories hosted on github with semver \
        --         \ formatted tags. However, it seems like this package, or version "
        --           ++ V.toChars vsn
        --           ++ ", doesn't exist."
        --     ]
        -- Git.FailedCommand args errorMsg ->
        --   toGitReport
        --     (context ++ ", so I tried to execute:")
        --     [ D.indent 4 $ D.reflow $ unwords args,
        --       D.reflow "But it returned the following error message:",
        --       D.indent 4 $ D.reflow errorMsg
        --     ]

clonePackage : ChildProcess.Permission -> Path -> PackageName -> SemanticVersion -> Task ChildProcess.FailedRun ChildProcess.SuccessfulRun
clonePackage cpPerm repo name version =
    let
        githubUrl =
            "https://github.com/" ++ PackageName.toString name ++ ".git"
    in
    ChildProcess.run
        cpPerm
        "git"
        [ "clone"
        , "--branch"
        , SemanticVersion.toString version
        , "--depth"
        , "1"
        , githubUrl
        , Path.toPosixString repo
        ]
        { shell = ChildProcess.NoShell
        , workingDirectory = ChildProcess.InheritWorkingDirectory
        , environmentVariables = ChildProcess.InheritEnvironmentVariables
        , maximumBytesWrittenToStreams = 4096
        , runDuration = ChildProcess.Milliseconds 30000
        }


fetchLatestVersion : ChildProcess.Permission -> PackageName -> Task Error (Maybe SemanticVersion)
fetchLatestVersion cpPerm name =
    fetchVersions cpPerm name
        |> Task.map Array.last
        -- TODO
        |> Task.mapError (\_ -> FailedCommand)


fetchVersions : ChildProcess.Permission -> PackageName -> Task Error (Array SemanticVersion)
fetchVersions cpPerm name =
    let
        githubUrl =
            "https://github.com/" ++ PackageName.toString name ++ ".git"
    in
    ChildProcess.run
        cpPerm
        "git"
        [ "ls-remote"
        , "--tags"
        , githubUrl
        ]
        { shell = ChildProcess.NoShell
        , workingDirectory = ChildProcess.InheritWorkingDirectory
        , environmentVariables = ChildProcess.InheritEnvironmentVariables
        , maximumBytesWrittenToStreams = 4096
        , runDuration = ChildProcess.Milliseconds 30000
        }
        |> Task.andThen
            (\result ->
                when Bytes.toString result.stdout is
                    Nothing ->
                        -- TODO: Proper error here
                        Task.succeed []

                    Just tagList ->
                        -- format: commit hash \t refs/tags/<tag>
                        tagList
                            |> String.split "\n"
                            |> Array.map (String.split "/" >> Array.last >> Maybe.withDefault "")
                            |> Array.mapAndKeepJust SemanticVersion.fromString
                            |> Array.sortWith SemanticVersion.compare
                            |> Task.succeed
            )
        -- TODO
        |> Task.mapError (\_ -> FailedCommand)


hasLocalTag : ChildProcess.Permission -> SemanticVersion -> Task String {}
hasLocalTag permission vsn =
    ChildProcess.run permission "git" [ "show", "--name-only", SemanticVersion.toString vsn ]
        { shell = ChildProcess.NoShell
        , workingDirectory = ChildProcess.InheritWorkingDirectory
        , environmentVariables = ChildProcess.InheritEnvironmentVariables
        , maximumBytesWrittenToStreams = 4096
        , runDuration = ChildProcess.Milliseconds 5000
        }
        |> Task.mapError Debug.toString
        |> Task.map (\_ -> {})


hasNoLocalChangesSinceTag : ChildProcess.Permission -> SemanticVersion -> Task String {}
hasNoLocalChangesSinceTag permission vsn =
    ChildProcess.run permission "git" [ "diff-index", "--quiet", SemanticVersion.toString vsn ]
        { shell = ChildProcess.NoShell
        , workingDirectory = ChildProcess.InheritWorkingDirectory
        , environmentVariables = ChildProcess.InheritEnvironmentVariables
        , maximumBytesWrittenToStreams = 4096
        , runDuration = ChildProcess.Milliseconds 5000
        }
        |> Task.mapError Debug.toString
        |> Task.map (\_ -> {})
