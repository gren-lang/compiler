module Terminal.Init exposing
    ( Config
    , run
    )

import CLI.PrettyPrinter as PP
import ChildProcess
import Stream
import Stream.Log
import Task exposing (Task)
import FileSystem
import FileSystem.Path as Path exposing (Path)
import Bytes exposing (Bytes)
import Json.Encode as Json
import Compiler.Backend
import Compiler.Platform as Platform exposing (Platform)
import Compiler.PackageName as PackageName exposing (PackageName)
import Compiler.Outline as Outline
import Compiler.License as License
import Terminal.User
import Git
import SemanticVersion exposing (SemanticVersion)
import SemanticVersionRange
import Dict
import Meta
import Terminal.PackageInstall as PackageInstall


type alias Config =
    { stdout : Stream.Writable Bytes
    , stdin : Stream.Readable Bytes
    , fsPermission : FileSystem.Permission
    , cpPermission : ChildProcess.Permission
    , interactive : Bool
    , useColor : Bool
    , package : Bool
    , platform : Platform
    }


type Error
    = AlreadyInitialized
    | FileSystemFailure FileSystem.Error
    | PromptError Stream.Error
    | CouldNotRetrieveVersions { packageName : PackageName, error : Git.Error }
    | NoVersionFound PackageName
    -- TODO
    | InstallError


run : Config -> Cmd a
run config =
    let
        grenJsonExists =
            FileSystem.checkAccess config.fsPermission [] (Path.fromPosixString "gren.json")
                |> Task.andThen
                    (\_ ->
                        Task.succeed True
                    )
                |> Task.onError
                    (\err ->
                        if FileSystem.errorIsNoSuchFileOrDirectory err then
                            Task.succeed False

                        else
                            Task.fail (FileSystemFailure err)
                    )
    
    in
    grenJsonExists
        |> Task.andThen
            (\exists ->
                if exists then
                    Task.fail AlreadyInitialized

                else
                    Terminal.User.confirm
                        { stdout = config.stdout
                        , stdin = config.stdin
                        , interactive = config.interactive
                        , question =
                            PP.verticalBlock
                                [ PP.block
                                    [ PP.words "Hello! Gren projects always start with a"
                                    , PP.text " "
                                    , PP.color PP.Green (PP.text "gren.json")
                                    , PP.text " "
                                    , PP.words "file."
                                    ]
                                , PP.words "I can create one for you."
                                , PP.empty
                                , PP.words "Would you like me to create a gren.json file now?"
                                ]
                        , defaultValue = True
                        }
                        |> Task.mapError PromptError
            )
        |> Task.andThen
            (\confirmed ->
                if confirmed then
                    init config

                else
                    Stream.Log.line config.stdout "Ok, I won't do anything."
            )
        |> Task.onError
            (\err ->
                Stream.Log.line config.stdout (displayError err)
            )
        |> Task.execute


init : Config -> Task Error {}
init config =
    let
        deps =
            dependenciesForPlatform config.platform
    in
    deps
        |> Array.map
            (\packageName ->
                Git.fetchLatestVersion config.cpPermission packageName
                    |> Task.mapError
                        (\err ->
                            CouldNotRetrieveVersions { packageName = packageName, error = err }
                        )
                    |> Task.andThen
                        (\maybeVsn ->
                            when maybeVsn is
                                Just vsn ->
                                    Task.succeed
                                        { name = packageName
                                        , version = vsn
                                        }

                                Nothing ->
                                    Task.fail (NoVersionFound packageName)
                        )
            )
        |> Task.concurrent
        |> Task.andThen (generateGrenJson config)


dependenciesForPlatform : Platform -> Array PackageName
dependenciesForPlatform platform =
  when platform is
    Platform.Common ->
        [ PackageName.core ]

    Platform.Browser ->
        [ PackageName.core, PackageName.browser ]

    Platform.Node ->
        [ PackageName.core, PackageName.node ]


generateGrenJson : Config -> Array { name : PackageName, version : SemanticVersion } -> Task Error {}
generateGrenJson config deps =
    let
        outline =
            if config.package then
                Outline.Pkg
                    { platform = config.platform
                    , name = PackageName.example
                    , summary = ""
                    , license = License.bsd3
                    , version = { major = 1, minor = 0, patch = 0 }
                    , exposedModules = Outline.ExposedArray []
                    , grenVersion = SemanticVersionRange.compatibleWith Meta.version
                    , dependencies =
                        Array.foldl
                            (\{ name, version } dict ->
                                Dict.set
                                    (PackageName.toString name)
                                    (Outline.Version (SemanticVersionRange.compatibleWith version))
                                    dict
                            )
                            Dict.empty
                            deps
                    }

            else
                Outline.App
                    { platform = config.platform
                    , sourceDirectories = [ Path.fromPosixString "src" ]
                    , grenVersion = Meta.version
                    , dependencies =
                        { direct =
                            Array.foldl
                                (\{ name, version } dict ->
                                    Dict.set (PackageName.toString name) (Outline.Version version) dict
                                )
                                Dict.empty
                                deps
                        , indirect = Dict.empty
                        }
                    }
    in
    PackageInstall.run
        { stdout = config.stdout
        , stdin = config.stdin
        , fsPermission = config.fsPermission
        , cpPermission = config.cpPermission
        , interactive = config.interactive
        , useColor = config.useColor
        }
        { projectPath = Path.empty
        , outline = outline
        }
        |> Task.mapError (\_ -> InstallError)
        |> Task.andThen
            (\resolution ->
                let
                    newOutline =
                        when outline is
                            Outline.App appOutline ->
                                let
                                    originalDependencyNames =
                                        Dict.keys appOutline.dependencies.direct

                                    indirectDeps =
                                        resolution.dependencies
                                            |> Dict.keepIf (\name _ -> not <| Array.member name originalDependencyNames)
                                            |> Dict.map (\_ package -> Outline.Version package.outline.version)
                                in
                                Outline.App
                                    { appOutline
                                        | dependencies =
                                            { appOutline.dependencies
                                                | indirect = indirectDeps
                                            }
                                    }

                            Outline.Pkg _ ->
                                outline

                    encodedOutline =
                        newOutline
                            |> Outline.toJson
                            |> Json.encode 4
                in
                Path.fromPosixString "gren.json"
                    |> FileSystem.writeFile config.fsPermission (Bytes.fromString encodedOutline)
                    |> Task.mapError FileSystemFailure
                    |> Task.map (\_ -> {})
            )


displayError : Error -> String
displayError err =
    Terminal.User.prettyPrint <|
        when err is
            AlreadyInitialized ->
                Terminal.User.report
                    "EXISTING PROJECT"
                    Nothing
                    (PP.verticalBlock
                        [ PP.words "You already have a gren.json file, so there's nothing for me to initialize!"
                        , PP.empty
                        , PP.block
                            [ PP.text "Maybe "
                            , PP.color PP.Green (Terminal.User.makeLink "init")
                            , PP.text " "
                            , PP.words "can help you figure out what to do next?"
                            ]
                        ]
                    )

            FileSystemFailure fsErr ->
                Terminal.User.report
                    "FILESYSTEM ERROR"
                    (Just <| FileSystem.errorPath fsErr)
                    (PP.verticalBlock
                        [ PP.words "An unexpected error occured when accessing the filesystem."
                        , PP.empty
                        , PP.words "The error provided by the operating system is:"
                        , PP.empty
                        , PP.words (FileSystem.errorToString fsErr)
                            |> PP.color PP.Red
                            |> PP.indent
                        , PP.empty
                        , PP.words "Verify that you have access to this path. If the error persist, consider submitting a bug report."
                        ]
                    )

            PromptError streamError ->
                Terminal.User.report
                    "STREAM ERROR"
                    Nothing
                    (PP.verticalBlock
                        [ PP.words "An unexpected error occured with either the standard output or standard input streams."
                        , PP.empty
                        , PP.words "The error is:"
                        , PP.empty
                        , PP.words (Stream.errorToString streamError)
                            |> PP.color PP.Red
                            |> PP.indent
                        , PP.empty
                        , PP.words "This is most likely a bug. Consider submitting a bug report."
                        ]
                    )

            CouldNotRetrieveVersions { packageName, error } ->
                Terminal.User.report
                    "FAILED TO LOAD DEPENDENCIES"
                    Nothing
                    (PP.verticalBlock
                        [ PP.words "I tried to find the latest compatible versions of the"
                        , PP.text " "
                        , PP.text (PackageName.toString packageName)
                            |> PP.color PP.Green
                        , PP.text " "
                        , PP.words "but failed due to a problem with Git. I use Git to download external dependencies from Github."
                        , PP.empty
                        , PP.words "The error is:"
                        , PP.empty
                        , PP.words (Git.errorToString error)
                            |> PP.color PP.Red
                            |> PP.indent
                        , PP.empty
                        , PP.words "Please check your git configuration. If the problem persist, consider submitting a bug report."
                        ]
                    )

            NoVersionFound packageName ->
                Terminal.User.report
                    "FAILED TO LOAD DEPENDENCIES"
                    Nothing
                    (PP.verticalBlock
                        [ PP.words "I tried to find the latest compatible versions of the"
                        , PP.text " "
                        , PP.text (PackageName.toString packageName)
                            |> PP.color PP.Green
                        , PP.text " "
                        , PP.words "but failed to find any versions for that package!"
                        , PP.empty
                        , PP.words "This is most likely a bug. Consider submitting a bug report."
                        ]
                    )

            InstallError ->
                PP.text "Install error"
