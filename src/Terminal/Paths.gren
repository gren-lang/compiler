module Terminal.Paths exposing
    ( Config
    , Options
    , Error (..)
    , run
    , errorToString
    )

import Stream
import Stream.Log
import Task exposing (Task)
import FileSystem
import FileSystem.Path as Path exposing (Path)
import Bytes exposing (Bytes)
import Json.Encode as Json
import Compiler.Paths


type alias Config =
    { pathToString : (Path -> String)
    , cacheRoot : Compiler.Paths.CacheRoot
    , backendPath : Path
    , stdout : Stream.Writable Bytes
    , fsPermission : FileSystem.Permission
    }


type alias Options =
    { project : Bool
    , backend : Bool
    , cache : Bool
    , json : Bool
    }


type Error
    = NoProject
    | InvalidOptions


run : Config -> Options -> Task Error {}
run config opts =
    when opts is
        { project = False, cache = False, backend = False, json = False } ->
            Compiler.Paths.projectRoot config.fsPermission
                |> Task.andThen
                    (\project ->
                        [ "project: " ++ config.pathToString project
                        , "cache: " ++ config.pathToString (Compiler.Paths.cacheRootToPath config.cacheRoot)
                        , "backend: " ++ config.pathToString config.backendPath
                        ]
                            |> String.join "\n"
                            |> Stream.Log.line config.stdout
                    )
                |> Task.mapError (\_ -> NoProject)

        { project = False, cache = False, backend = False, json = True } ->
            Compiler.Paths.projectRoot config.fsPermission
                |> Task.andThen
                    (\project ->
                        Json.object
                            [ { key = "project", value = Json.string (config.pathToString project) }
                            , { key = "cache", value = Json.string (config.pathToString (Compiler.Paths.cacheRootToPath config.cacheRoot)) }
                            , { key = "backend", value = Json.string (config.pathToString config.backendPath) }
                            ]
                            |> Json.encode 4
                            |> Stream.Log.line config.stdout
                    )
                |> Task.mapError (\_ -> NoProject)

        { project = True, cache = False, backend = False, json = False } ->
            Compiler.Paths.projectRoot config.fsPermission
                |> Task.andThen
                    (\project ->
                        Stream.Log.line config.stdout (config.pathToString project)
                    )
                |> Task.mapError (\_ -> NoProject)

        { project = True, cache = False, backend = False, json = True } ->
            Compiler.Paths.projectRoot config.fsPermission
                |> Task.andThen
                    (\project ->
                        Json.object
                            [ { key = "project", value = Json.string (config.pathToString project) }
                            ]
                            |> Json.encode 4
                            |> Stream.Log.line config.stdout
                    )
                |> Task.mapError (\_ -> NoProject)

        { project = False, cache = True, backend = False, json = False } ->
            Compiler.Paths.projectRoot config.fsPermission
                |> Task.andThen
                    (\project ->
                         config.pathToString (Compiler.Paths.cacheRootToPath config.cacheRoot)
                            |> Stream.Log.line config.stdout
                    )
                |> Task.mapError (\_ -> NoProject)

        { project = False, cache = True, backend = False, json = True } ->
            Compiler.Paths.projectRoot config.fsPermission
                |> Task.andThen
                    (\project ->
                        Json.object
                            [ { key = "cache", value = Json.string (config.pathToString (Compiler.Paths.cacheRootToPath config.cacheRoot)) }
                            ]
                            |> Json.encode 4
                            |> Stream.Log.line config.stdout
                    )
                |> Task.mapError (\_ -> NoProject)

        { project = False, cache = False, backend = True, json = False } ->
            Stream.Log.line config.stdout (config.pathToString config.backendPath)

        { project = False, cache = False, backend = True, json = True } ->
            Json.object
                [ { key = "backend", value = Json.string (config.pathToString config.backendPath) }
                ]
                |> Json.encode 4
                |> Stream.Log.line config.stdout

        _ ->
            Task.fail InvalidOptions


errorToString : Error -> String
errorToString error =
    when error is
        NoProject ->
            "Could not find a Gren project, so cannot output it's path. Alternatively, try using the --cache or --backend options."

        InvalidOptions ->
            "You can only use one of --project, --package or --backend!"
