module Terminal.User exposing (confirm)

import Bytes exposing (Bytes)
import Stream
import Stream.Log
import Task exposing (Task)


type alias ConfirmConfig =
    { stdout : Stream.Writable Bytes
    , stdin : Stream.Readable Bytes
    , interactive : Bool
    , question : String
    , defaultValue : Bool
    }


confirm : ConfirmConfig -> Task Stream.Error Bool
confirm { stdout, stdin, interactive, question, defaultValue } =
    if not interactive then
        Task.succeed defaultValue

    else
        let
            legend =
                if defaultValue then
                    " [Y|n]: "

                else
                    " [y|N]: "
        in
        Stream.Log.string stdout (question ++ legend)
            |> Task.andThen (\_ -> Stream.readBytesAsString stdin)
            |> Task.map
                (\answer ->
                    when String.trim (String.toLower answer) is
                        "y" ->
                            True

                        "" ->
                            defaultValue

                        _ ->
                            False
                )
