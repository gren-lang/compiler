module Stream.Log exposing
    ( bytes, string, line )

{-| Copied from gren-lang/core, to be removed -}

import Task exposing (Task)
import Bytes exposing (Bytes)
import Stream


{-| Send `Bytes` to a writable byte stream. Any potential error is ignored.
-}
bytes : Stream.Writable Bytes -> Bytes -> Task x {}
bytes stream data =
    Stream.write data stream
        |> Task.andThen (\_ -> Task.succeed {})
        |> Task.onError (\_ -> Task.succeed {})


{-| Send a `String` to a writable byte stream. Any potential error is ignored.
-}
string : Stream.Writable Bytes -> String -> Task x {}
string stream data =
    bytes stream (Bytes.fromString data)


{-| Send a `String` to a writable byte stream. The Â´String` will end with a newline character.
Any potential error is ignored.
-}
line : Stream.Writable Bytes -> String -> Task x {}
line stream data =
    string stream (data ++ "\n")
