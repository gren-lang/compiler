port module Main exposing (main)

import Node
import ChildProcess
import CompilerBlob
import Init
import Stream exposing (Stream)
import Task exposing (Task)
import Dict exposing (Dict)
import FileSystem
import FileSystem.Path as Path exposing (Path)
import HttpClient
import Bytes exposing (Bytes)
import Terminal
import Process
import CLI.Parser
import CLI.PrettyPrinter as PP
import SemanticVersion exposing (SemanticVersion)
import Package exposing (Package)
import Json.Encode as Json


main : Node.Program Model Msg
main =
    Node.defineProgram
        { init = init
        , update = update
        , subscriptions = \_model -> Sub.none
        }


type alias Model = 
    { args : Array String
    , stdout : Stream
    , stderr : Stream
    , useColor : Bool
    , interactive : Bool
    , fsPermission : FileSystem.Permission
    , cpPermission : ChildProcess.Permission
    , httpPermission : HttpClient.Permission
    , pathToString : Path -> String
    }


init : Node.Environment -> Init.Task { model : Model, command : Cmd Msg }
init env =
    Init.await FileSystem.initialize <| \fsPermission ->
    Init.await ChildProcess.initialize <| \cpPermission ->
    Init.await HttpClient.initialize <| \httpPermission ->
    Init.await Terminal.initialize <| \terminalConfig ->
    Init.awaitTask Node.getEnvironmentVariables <| \envVars ->
    Init.awaitTask (FileSystem.homeDirectory fsPermission) <| \homeDir ->
            let
                userArgs =
                    Array.dropFirst 2 env.args

                interactiveTerminal =
                    terminalConfig /= Nothing

                useColor =
                    interactiveTerminal && not (Dict.member "NO_COLOR" envVars)

                maybePaths =
                    case { platform = env.platform, override = Dict.get "GREN_BIN" envVars } of
                        { override = Just overridePath, platform = Node.Win32 } ->
                            Just <|
                                { remotePath = Nothing
                                , localPath = Path.fromWin32String overridePath
                                }
                        
                        { override = Just overridePath } ->
                            Just <|
                                { remotePath = Nothing
                                , localPath = Path.fromPosixString overridePath
                                }

                        _ ->
                            CompilerBlob.downloadUrl env.platform env.cpuArchitecture
                                |> Result.map 
                                    (\url ->
                                        { remotePath = Just url
                                        , localPath = CompilerBlob.cachePath env.platform envVars homeDir
                                        }
                                    )
                                |> Result.toMaybe

            in
            Node.startProgram
                { model =
                    { args = userArgs
                    , stdout = env.stdout
                    , stderr = env.stderr
                    , interactive = interactiveTerminal
                    , useColor = useColor
                    , fsPermission = fsPermission
                    , cpPermission = cpPermission
                    , httpPermission = httpPermission
                    , pathToString =
                        if env.platform == Node.Win32 then
                            Path.toWin32String
                        else
                            Path.toPosixString
                    }
                , command =
                    case maybePaths of
                        Just paths ->
                            FileSystem.checkAccess fsPermission [] paths.localPath
                                |> Task.attempt 
                                    (\result -> 
                                        ExistanceChecked
                                            { maybeRemotePath = paths.remotePath
                                            , localPath = paths.localPath
                                            , existanceResult = result
                                            }
                                    )

                        Nothing ->
                            Stream.sendLine env.stderr "We currently don't support this platform/arch."
                                |> Task.execute
                }


type Msg
    = ExistanceChecked 
        { maybeRemotePath : Maybe String
        , localPath : Path
        , existanceResult : Result FileSystem.Error Path
        }
    | CompilerDownloaded 
        { localPath : Path
        , downloadResult : Result (HttpClient.Error Bytes) (HttpClient.Response Bytes)
        }
    | CompilerInstalled (Result FileSystem.Error Path)
    | CompilerRan Int
    | CompilerRanStatic String Int


port completeStaticBuild : String -> Cmd msg


update : Msg -> Model -> { model : Model, command : Cmd Msg }
update msg model =
    { model = model
    , command =
        case msg of
            ExistanceChecked { maybeRemotePath, localPath, existanceResult = Err _ } ->
                case maybeRemotePath of
                    Just remotePath ->
                        Stream.sendLine model.stdout ("Compiler not found at " ++ model.pathToString localPath ++ ". Downloading...")
                            |> Task.andThen (\{} -> CompilerBlob.download model.httpPermission remotePath)
                            |> Task.attempt (\result -> CompilerDownloaded { localPath = localPath, downloadResult = result })
            
                    Nothing ->
                        Stream.sendLine model.stderr ("Compiler not found at " ++ model.pathToString localPath)
                            |> Task.execute

            ExistanceChecked { existanceResult = Ok compilerPath } ->
                parseUserArgs model compilerPath

            CompilerDownloaded { localPath, downloadResult = Err ((HttpClient.BadStatus res) as err) } ->
                if res.statusCode == 302 then
                    case Dict.get "location" res.headers of
                        Just [ location ] ->
                            CompilerBlob.download model.httpPermission location
                                |> Task.attempt (\result -> CompilerDownloaded { localPath = localPath, downloadResult = result })

                        _ ->
                            Stream.sendLine model.stderr "Missing, or vague, 'location' header in 302 response from server."
                                |> Task.execute

                else
                    Stream.sendLine model.stderr (HttpClient.errorToString err)
                        |> Task.execute
        
            CompilerDownloaded { downloadResult = Err err } ->
                Stream.sendLine model.stderr (HttpClient.errorToString err)
                    |> Task.execute
        
            CompilerDownloaded { localPath, downloadResult = Ok res } ->
                let
                    cacheFolder =
                        Path.parentPath localPath
                            |> Maybe.withDefault Path.empty
                in
                FileSystem.makeDirectory model.fsPermission { recursive = True } cacheFolder
                    |> Task.andThen (\_cacheFolder -> FileSystem.writeFile model.fsPermission res.data localPath)
                    |> Task.andThen 
                        (FileSystem.changeAccess
                            model.fsPermission
                            { owner = [ FileSystem.Read, FileSystem.Write, FileSystem.Execute ]
                            , group = [ FileSystem.Read, FileSystem.Execute ]
                            , others = [ FileSystem.Read, FileSystem.Execute ]
                            }
                        )
                    |> Task.andThen 
                        (\binPath -> 
                            Stream.sendLine model.stdout "Downloaded"
                                |> Task.map (\_ -> binPath)
                        )
                    |> Task.attempt CompilerInstalled
        
            CompilerInstalled (Err fsErr) ->
                Stream.sendLine model.stderr ("Failed to install binary after download, due to error: " ++ FileSystem.errorToString fsErr)
                    |> Task.execute
        
            CompilerInstalled (Ok compilerPath) ->
                parseUserArgs model compilerPath

            CompilerRan exitCode ->
                Node.exitWithCode exitCode
                    |> Task.execute
            
            CompilerRanStatic output exitCode ->
                if exitCode == 0 then
                    completeStaticBuild output
                
                else
                    Node.exitWithCode exitCode
                        |> Task.execute
        }


parseUserArgs : Model -> Path -> Cmd Msg
parseUserArgs model compilerPath =
    let
        colorFilter =
            if model.useColor then
                identity

            else
                PP.stripColor

        prettyTextToTerminal doc =
            doc
                |> colorFilter
                |> PP.toStringWithOptions
                    { PP.defaultOptions | maxColumns = 80 }
    in
    case CLI.Parser.run model.args cliParser of
        CLI.Parser.UnknownCommand commandName ->
            Stream.sendLine model.stderr ("I don't recognize this command: " ++ commandName)
                |> Task.execute
    
        CLI.Parser.BadFlags err ->
            err
                |> CLI.Parser.flagErrorPrettified
                |> prettyTextToTerminal
                |> Stream.sendLine model.stderr
                |> Task.execute
    
        CLI.Parser.BadArguments err ->
            err
                |> CLI.Parser.argumentErrorPrettified
                |> prettyTextToTerminal
                |> Stream.sendLine model.stderr
                |> Task.execute
    
        CLI.Parser.HelpText prettifiedText ->
            prettifiedText
                |> prettyTextToTerminal
                |> Stream.sendLine model.stdout
                |> Task.execute
    
        CLI.Parser.Success parsedCommand ->
            let
                actualCommand =
                    case parsedCommand of
                        MakeStatic opts ->
                            CompilerBlob.Make
                                { optimize = True
                                , sourcemaps = False
                                , output = Just (CompilerBlob.Exe <| model.pathToString opts.output)
                                , report = Nothing
                                }
                                [ opts.source ]

                        CompilerCommand cmd ->
                            cmd
                
                completionCommand =
                    case parsedCommand of
                        MakeStatic opts ->
                            CompilerRanStatic <| model.pathToString opts.output

                        _ ->
                            CompilerRan
            in
            CompilerBlob.run
                model.cpPermission
                { command = actualCommand
                , interactiveSession = model.interactive
                , useColor = model.useColor
                , compilerPath = compilerPath
                , pathToString = model.pathToString
                , onComplete = completionCommand
                }


-- CLI Parsing


type ParsedCommand
    = MakeStatic MakeStaticOpts
    | CompilerCommand CompilerBlob.Command


type alias MakeStaticOpts =
    { output : Path
    , source : Path
    }


cliParser : CLI.Parser.App ParsedCommand
cliParser =
    { name = "gren"
    , version = "0.5.4"
    , intro = 
        PP.verticalBlock
            [ PP.block
                [ PP.text "Hi, thank you for trying out "
                , PP.intenseColor PP.Green <| PP.text ("Gren " ++ CompilerBlob.version)
                , PP.text ". I hope you like it!"
                ]
            , PP.empty
            , PP.intenseColor PP.Black <|
                PP.text
                    """
                    -------------------------------------------------------------------------------
                    I highly recommend working through <https://gren-lang.org/learn> to get started
                    It teaches many important concepts, including how to use `gren` in the terminal
                    -------------------------------------------------------------------------------
                    """
            ]
    , outro = 
        PP.words
            """
            Be sure to ask on the Gren Discord (https://discord.gg/Chb9YB9Vmh) if you run into trouble!
            Folks are friendly and happy to help out. They hang out there because it is fun, so be kind
            to get the best results!
            """
    , commands =
        CLI.Parser.defineGroup
            |> CLI.Parser.withCommand
                { word = "init"
                , arguments =
                    CLI.Parser.noArgs
                , flags =
                    CLI.Parser.initFlags 
                        (\package maybePlatform ->
                            { package = package
                            , platform = 
                                if package then
                                    Maybe.withDefault CompilerBlob.Common maybePlatform

                                else
                                    Maybe.withDefault CompilerBlob.Browser maybePlatform
                            }
                        )
                        |> CLI.Parser.toggle "package" "Create a package (as opposed to an application)"
                        |> CLI.Parser.flag "platform" initPlatformParser "Which platform to target"
                , commonDescription =
                    Just "Start a Gren project. It creates a starter gren.json file."
                , summary =
                    "The `init` command helps start Gren project:"
                , example = 
                    PP.words
                        """
                        It will ask permission to create a gren.json file, the one thing
                        common to all Gren project.
                        """
                , builder =
                    \_args flags -> CompilerCommand <| CompilerBlob.Init flags
                }
            |> CLI.Parser.withCommand
                { word = "repl"
                , arguments =
                    CLI.Parser.noArgs
                , flags =
                    CLI.Parser.initFlags
                        (\maybeInterpreter ->
                            { interpreter = maybeInterpreter
                            }
                        )
                        |> CLI.Parser.flag "interpreter" interpreterParser "Path to a alternate JS interpreter, like deno or nodejs."
                , commonDescription =
                    Just 
                        """
                        Open up an interactive programming session. Type in Gren expressions like
                        (2 + 2) or (String.length \"test\") and see if they equal four!
                        """
                , summary =
                    "The `repl` command opens up an interactive programming session:"
                , example = 
                    PP.words
                        """
                        Start working through <https://gren-lang.org/learn> to learn how to use this!
                        It has a whole chapter that uses the REPL for everything, so that is probably
                        the quickest way to get started.
                        """
                , builder =
                    \_args flags -> CompilerCommand <| CompilerBlob.Repl flags
                }
            |> CLI.Parser.withCommand
                { word = "make"
                , arguments =
                    CLI.Parser.zeroOrMoreArgs CLI.Parser.grenFileParser
                , flags =
                    CLI.Parser.initFlags 
                        (\optimize sourcemaps output report ->
                            { optimize = optimize
                            , sourcemaps = sourcemaps
                            , output = output
                            , report = report
                            }
                        )
                        |> CLI.Parser.toggle "optimize" "Turn on optimizations to make code smaller and faster. For example, the compiler renames record fields to be as short as possible and unboxes values to reduce allocation."
                        |> CLI.Parser.toggle "sourcemaps" "Add sourcemaps to the resulting JS file. This let's you debug Gren code in a JS debugger, at the cost of longer compile times and a bigger JS file."
                        |> CLI.Parser.flag "output" outputParser "Specify the name of the resulting JS file. For example --output=assets/gren.js to generate the JS at assets/gren.js. You can also use --output=/dev/stdout to output the JS to the terminal, or --output=/dev/null to generate no output at all!"
                        |> CLI.Parser.flag "report" reportParser "You can say --report=json to get error messages as JSON. This is only really useful if you are an editor plugin. Humans should avoid it!"
                , commonDescription =
                    Nothing
                , summary =
                    "The `make` command compiles Gren code into JS or HTML:"
                , example = 
                    PP.verticalBlock
                        [ PP.words "For example:"
                        , PP.empty
                        , PP.words "gren make src/Main.gren"
                            |> PP.indent
                            |> PP.color PP.Green
                        , PP.empty
                        , PP.words
                            """
                            This tries to compile an Gren file named src/Main.gren, generating an index.html
                            file if possible.
                            """
                        ]
                , builder =
                    \args flags -> CompilerCommand <| CompilerBlob.Make flags args
                }
            |> CLI.Parser.withCommand
                { word = "make-static"
                , arguments =
                    CLI.Parser.twoArgs 
                        (\source output ->
                            { source = source
                            , output = output
                            }
                        )
                        CLI.Parser.grenFileParser
                        CLI.Parser.pathParser
                , flags =
                    CLI.Parser.noFlags
                , commonDescription =
                    Nothing
                , summary =
                    "The `make-static` command compiles Gren code into a self-contained executable:"
                , example = 
                    PP.verticalBlock
                        [ PP.words "For example:"
                        , PP.empty
                        , PP.words "gren make-static src/Main.gren app"
                            |> PP.indent
                            |> PP.color PP.Green
                        , PP.empty
                        , PP.words
                            """
                            This tries to compile a Gren file named `src/Main.gren`, generating an `app`
                            file if possible. `app` is a static executable that can be run even if `node` is
                            not installed on the system.
                            """
                        ]
                , builder =
                    \args _flags -> MakeStatic args
                }
            |> CLI.Parser.withCommand
                { word = "docs"
                , arguments =
                    CLI.Parser.noArgs
                , flags =
                    CLI.Parser.initFlags 
                        (\output report ->
                            { output = output
                            , report = report
                            }
                        )
                        |> CLI.Parser.flag "output" docsOutputParser "Specify the name of the resulting JSON file. For example --output=assets/docs.json to generate the JSON at assets/docs.json. You can also use --output=/dev/stdout to output the JSON to the terminal, or --output=/dev/null to verify that generating the documentation would work."
                        |> CLI.Parser.flag "report" reportParser "You can say --report=json to get error messages as JSON. This is only really useful if you are an editor plugin. Humans should avoid it!"
                , commonDescription =
                    Nothing
                , summary =
                    "The `docs` command collects all documentation for a package in a JSON file:"
                , example = 
                    PP.verticalBlock
                        [ PP.words "For example:"
                        , PP.words "gren docs"
                            |> PP.indent
                            |> PP.color PP.Green
                        , PP.words
                            """
                            This collects all documentation for the current pacage and writes it to a
                            docs.json file, if possible.
                            """
                        ]
                , builder =
                    \_args flags -> CompilerCommand <| CompilerBlob.Docs flags
                }
            |> CLI.Parser.withPrefix "package" packageCommands
    }


packageCommands : CLI.Parser.GroupParser ParsedCommand
packageCommands =
    CLI.Parser.defineGroup
        |> CLI.Parser.withCommand
            { word = "install"
            , arguments =
                CLI.Parser.oneOfArgs
                    [ CLI.Parser.noArgs
                        |> CLI.Parser.mapArgs (\_ -> Nothing)
                    , CLI.Parser.oneArg Package.cliParser
                        |> CLI.Parser.mapArgs Just
                    ]
            , flags =
                CLI.Parser.noFlags 
            , commonDescription =
                Nothing
            , summary =
                "The `install` command fetches packages from github for use in your project:"
            , example = 
                PP.verticalBlock
                    [ PP.words 
                        """
                        For example, if you want to get access to Web APIs in your project,
                        you would say:
                        """
                    , PP.empty
                    , PP.text "gren package install gren-lang/browser"
                        |> PP.indent
                        |> PP.color PP.Green
                    , PP.empty
                    , PP.words
                        """
                        Notice that you must say the AUTHOR name and PROJECT name! After running those
                        commands, you could say `import Browser` in your code.
                        """
                    , PP.empty
                    , PP.words
                        """
                        You can also call this command without any arguments to download all dependencies
                        listed in gren.json. This can be helpful in Continous Integration setups where
                        you want to cache dependencies between builds.
                        """
                    ]
            , builder =
                \arg _flags -> CompilerCommand <| CompilerBlob.PackageInstall arg
            }
        |> CLI.Parser.withCommand
            { word = "uninstall"
            , arguments =
                CLI.Parser.oneArg Package.cliParser
            , flags =
                CLI.Parser.noFlags 
            , commonDescription =
                Nothing
            , summary =
                "The `uninstall` command removes packages from your project:"
            , example = 
                PP.verticalBlock
                    [ PP.words 
                        """
                        For example, if you want to get rid of the browser package in your project,
                        you would say:
                        """
                    , PP.empty
                    , PP.text "gren package uninstall gren-lang/browser"
                        |> PP.indent
                        |> PP.color PP.Green
                    , PP.empty
                    , PP.words 
                        """
                        Notice that you must say the AUTHOR name and PROJECT name!
                        """
                    , PP.empty
                    , PP.words
                        """
                        What if another package depends on the package you're trying to remove? No problem!
                        I'll let you know if that's the case, and help you resolve the situation. 
                        """
                    ]
            , builder =
                \arg _flags -> CompilerCommand <| CompilerBlob.PackageUninstall arg
            }
        |> CLI.Parser.withCommand
            { word = "outdated"
            , arguments =
                CLI.Parser.noArgs
            , flags =
                CLI.Parser.noFlags 
            , commonDescription =
                Nothing
            , summary =
                "The `outdated` command lists the latest version of your dependencies,"
                    ++ " if you're not already up to date:"
            , example = 
                PP.text "gren package outdated"
                    |> PP.indent
                    |> PP.color PP.Green
            , builder =
                \_args _flags -> CompilerCommand CompilerBlob.PackageOutdated
            }
        |> CLI.Parser.withCommand
            { word = "validate"
            , arguments =
                CLI.Parser.noArgs
            , flags =
                CLI.Parser.noFlags 
            , commonDescription =
                Nothing
            , summary =
                "The `validate` command checks that you've done everything necessary for"
                    ++ " others in the Gren community to use your package as a dependency:"
            , example = 
                PP.verticalBlock
                    [ PP.words 
                        """
                        Gren packages are \"just\" git repositories hosted on github. As
                        long as you've tagged your repository with semver formatted tags,
                        anyone can add your package as a dependency.
                        """
                    , PP.empty
                    , PP.words 
                        """
                        However, a package is no better than its documentation. This command
                        therefore checks that your package exposes a bare minimum of
                        prose that the users of your package can read.
                        """
                    , PP.empty
                    , PP.words
                        """
                        Keep in mind, you don't just want to tell people HOW to use
                        your package. It's equally important to tell them WHY. What
                        problem does it solve? Why should people use this particular
                        package to solve their problem?
                        """
                    , PP.empty
                    , PP.words
                        """
                        Once this command passes, you may want to add your repo to
                        <https://packages.gren-lang.org> so it becomes easier for the Gren
                        community to find your package, and its documentation.
                        """
                    ]
            , builder =
                \_args _flags -> CompilerCommand CompilerBlob.PackageValidate
            }
        |> CLI.Parser.withCommand
            { word = "bump"
            , arguments =
                CLI.Parser.noArgs
            , flags =
                CLI.Parser.noFlags 
            , commonDescription =
                Nothing
            , summary =
                "The `bump` command figures out the next version number based on API changes:"
            , example = 
                PP.words 
                    """
                    Say you just published version 1.0.0, but then decided to remove a function.
                    I will compare the published API to what you have locally, figure out that
                    it is a MAJOR change, and bump your version number to 2.0.0. I do this with
                    all packages, so there cannot be MAJOR changes hiding in PATCH releases in Gren!
                    """
            , builder =
                \_args _flags -> CompilerCommand CompilerBlob.PackageBump
            }
        |> CLI.Parser.withCommand
            { word = "diff"
            , arguments =
                CLI.Parser.oneOfArgs
                    [ CLI.Parser.noArgs
                        |> CLI.Parser.mapArgs (\{} -> CompilerBlob.DiffLatest)
                    , CLI.Parser.oneArg SemanticVersion.cliParser
                        |> CLI.Parser.mapArgs CompilerBlob.DiffVersion
                    , CLI.Parser.twoArgs CompilerBlob.DiffRange SemanticVersion.cliParser SemanticVersion.cliParser
                    , CLI.Parser.threeArgs CompilerBlob.DiffGlobal Package.cliParser SemanticVersion.cliParser SemanticVersion.cliParser
                    ]
            , flags =
                CLI.Parser.noFlags 
            , commonDescription =
                Nothing
            , summary =
                "The `diff` command detects API changes:"
            , example = 
                PP.verticalBlock
                    [ PP.words 
                        """
                        For example, to see what changed in the Browser package between
                        versions 1.0.0 and 2.0.0, you can say:
                        """
                    , PP.empty
                    , PP.text "gren package diff gren-lang/browser 1.0.0 2.0.0"
                        |> PP.indent
                        |> PP.color PP.Green
                    , PP.empty
                    , PP.words 
                        """
                        Sometimes a MAJOR change is not actually very big, so
                        this can help you plan your upgrade timelines.
                        """
                    ]
            , builder =
                \args _flags -> CompilerCommand <| CompilerBlob.PackageDiff args
            }


initPlatformParser : CLI.Parser.ValueParser CompilerBlob.Platform
initPlatformParser =
    { singular = "platform"
    , plural = "platforms"
    , fn = \str ->
        case str of
            "common" -> Just CompilerBlob.Common
            "browser" -> Just CompilerBlob.Browser
            "node" -> Just CompilerBlob.Node
            _ -> Nothing
    , examples =
        [ "common"
        , "browser"
        , "node"
        ]
    }


reportParser : CLI.Parser.ValueParser {}
reportParser =
    { singular = "report-type"
    , plural = "report-types"
    , fn = \str ->
        if str == "json" then
            Just {}

        else
            Nothing
    , examples =
        [ "json" ]
    }


interpreterParser : CLI.Parser.ValueParser String
interpreterParser =
    { singular = "interpreter"
    , plural = "interpreters"
    , fn = Just
    , examples =
        [ "node"
        , "deno"
        , "bun"
        ]
    }


outputParser : CLI.Parser.ValueParser CompilerBlob.MakeOutput
outputParser =
    { singular = "output-file"
    , plural = "output-files"
    , fn = \str ->
        case str of
            "/dev/stdout" -> Just CompilerBlob.StdOut
            "/dev/null" -> Just CompilerBlob.DevNull
            "NUL" -> Just CompilerBlob.DevNull
            "$null" -> Just CompilerBlob.DevNull
            _ ->
                if String.endsWith ".html" str then
                    Just <| CompilerBlob.Html str
                
                else if String.endsWith ".js" str then
                    Just <| CompilerBlob.Js str

                else
                    Just <| CompilerBlob.Exe str
    , examples =
        [ "/dev/stdout"
        , "/dev/null"
        , "index.html"
        , "index.js"
        , "app"
        ]
    }


docsOutputParser : CLI.Parser.ValueParser CompilerBlob.DocsOutput
docsOutputParser =
    { singular = "output-file"
    , plural = "output-files"
    , fn = \str ->
        case str of
            "/dev/stdout" -> Just CompilerBlob.DocsStdOut
            "/dev/null" -> Just CompilerBlob.DocsDevNull
            "NUL" -> Just CompilerBlob.DocsDevNull
            "$null" -> Just CompilerBlob.DocsDevNull
            _ ->
                if String.endsWith ".json" str then
                    Just <| CompilerBlob.DocsJson str

                else
                    Nothing
    , examples =
        [ "/dev/stdout"
        , "/dev/null"
        , "docs.json"
        ]
    }
